name: Repository autoupdate

on:
  schedule:
    - cron: '0 6 * * MON'
    
  workflow_dispatch:

jobs:
  check-and-update:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout external repository
      run: |
        rm -rf QuizQuestions.jl
        git clone https://github.com/jverzani/QuizQuestions.jl.git
    - name: Checkout internal repository
      uses: actions/checkout@v3
      with:
        path: 'QuizQuestionsPL.jl'
    - name: Setup Python (1)
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Setup Python (2)
      run: pip install packaging
    - name: Compare versions
      uses: jannekem/run-python-script-action@v1
      id: compare_versions
      with:
        script: |
          import os
          import tomllib
          from packaging import version

          def get_version(filename):
              with open(filename, 'rb') as file:
                  data = tomllib.load(file)
                  return data.get('version')
        
          ext_version = get_version('QuizQuestions.jl/Project.toml')
          int_version = get_version('QuizQuestionsPL.jl/Project.toml')

          print(f'External: {ext_version}')
          print(f'Internal: {int_version}')

          if version.parse(ext_version) > version.parse(int_version):
              val = "cond=UPDATE"
          else:
              val = "cond=NO_UPDATE"

          with open(os.environ['GITHUB_OUTPUT'], 'w') as writer:
              writer.write(val+"\n")
    - name: Do not perform autoupdate
      if: ${{ steps.compare_versions.outputs.cond == 'NO_UPDATE' }}
      run:
        echo "Update not needed"
    - name: Perform autoupdate
      if: ${{ steps.compare_versions.outputs.cond == 'UPDATE' || github.event_name == 'workflow_dispatch' }}
      run: |
        echo "Update needed"

        COMMIT_STR=$(cd QuizQuestions.jl && git log --format='%H' -n 1)
        cd QuizQuestionsPL.jl

        rm -rf *
        cp -r ../QuizQuestions.jl/* .

        mv src/QuizQuestions.jl src/QuizQuestionsPL.jl

        sed -i -e 's/QuizQuestions/QuizQuestionsPL/' src/QuizQuestionsPL.jl

        sed -i -e 's/^name = .*/name = "QuizQuestionsPL"/' \
               -e 's/^uuid = .*/uuid = "f9fc0e0f-bc92-42a6-bfc9-03707788a643"/' \
               Project.toml

        PKG_VERSION=$(grep -E '^version = "(.*)"' Project.toml | grep -Eo '[0-9\.]*')

        echo """# QuizQuestionsPL.jl

        Polish translation of [QuizQuestions.jl](https://github.com/jverzani/QuizQuestions.jl).""" > README.md

        sed -i  -e 's/"Choose..."/"Wybierz..."/g' \
                -e 's/"Correct"/"Poprawna odpowiedź"/g' \
                -e 's/"Incorrect"/"Niepoprawna odpowiedź"/g' \
                -e 's/"Not yet"/"Próbuj dalej"/g' \
                -e 's/"Something isn'"'"'t correct"/"Nie wszystkie wybrane odpowiedzi są poprawne"/g' \
                -e 's/"Numeric answer"/"Odpowiedź numeryczna"/g' \
                -e 's/"Text answer"/"Odpowiedź tekstowa"/g' \
                -e 's/"answer here..."/"wpisz tutaj odpowiedź..."/g' \
            src/show_methods.jl

        sed -i  -e 's/DONE/Wyślij/g' \
            src/html_templates.jl

        sed -i  -e 's/"true"/"prawda"/g' \
                -e 's/"false"/"fałsz"/g' \
                -e 's/"Yes"/"Tak"/g' \
                -e 's/"yes"/"tak"/g' \
                -e 's/"No"/"Nie"/g' \
                -e 's/"no"/"nie"/g' \
                -e 's/"You have {{:correct}} \*correct\* in {{:attempted}} \*attempted\* questions. There are {{:total_questions}} total questions to try."/"Prawidłowe odpowiedzi: {{:correct}}. Próby: {{:attempted}}. Łącznie pytań do rozwiązania: {{:total_questions}}."/' \
                -e 's/"You have {{:correct}} \*correct\* of the {{:total_questions}} total questions to try."/"Prawidłowe odpowiedzi: {{:correct}}. Łącznie pytań do rozwiązania: {{:total_questions}}."/' \
            src/question_types.jl

        git config --global user.name 'Git bot'
        git config --global user.email 'bot@noreply.github.com'
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git add .
        git commit -m "[${PKG_VERSION}] Auto updated reference: jverzani/QuizQuestions.jl@${COMMIT_STR}"
        git push
        
        git tag "v${PKG_VERSION}_$(date '+%Y%m%d%H%M')"
        git push origin --tags
