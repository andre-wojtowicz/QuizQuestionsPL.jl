name: Build demo page

on:
    repository_dispatch:
      types:
        - build-github-pages

    workflow_dispatch:

jobs:
    build-pages:
      runs-on: ubuntu-latest
      environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }}
      steps:
        - name: Ubuntu dependencies (1)
          uses: awalsh128/cache-apt-pkgs-action@latest
          with:
            packages: make wget curl zip python3
            version: 1.0
        - name: Ubuntu dependencies (1)
          run: |
            apt update && apt install -y python3-pip jupyter-notebook
        - name: Install Quarto
          uses: quarto-dev/quarto-actions/setup@v2
          with:
            version: 1.3.450
        - name: Install Julia
          uses: julia-actions/setup-julia@v1
          with:
            version: 1.9
        - name: Install Julia packages (1)
          run: julia -e 'using Pkg; Pkg.add(["IJulia", "Revise", "Plots"])'
        - name: Install Julia packages (2)
          run: |
            julia -e 'using Pkg; Pkg.add(url="https://github.com/andre-wojtowicz/QuizQuestionsPL.jl")'
            mkdir -p ~/.julia/config
            echo """try
              @eval using Revise
            catch e
              @warn "Revise init" exception=(e, catch_backtrace())
            end
            """ > ~/.julia/config/startup_ijulia.jl
        - name: Create website files (1)
          uses: DamianReeves/write-file-action@master
          with:
            path: _quarto.yml
            contents: |
              project:
                type: website
              
              website:
                title: "Demo PL"
                navbar:
                  left:
                  - href: index.qmd
                    text: "Demo PL"
        - name: Create website files (1)
          uses: DamianReeves/write-file-action@master
          with:
            path: index.qmd
            contents: |
              ---
              title: "Demo PL"
              format:
                html:
                  code-fold: true
              jupyter: julia-1.9
              ---

              ```{julia}
              #| echo: false
              using QuizQuestionsPL
              ```

              Dopasuj `abc`

              ```{julia}
              #| echo: false
              re = Regex("abc")
              stringq(re)
              ```

              ```{julia}
              #| echo: false
              a = 1
              numericq(a, label= raw"Ile wynosi ``\sin(\frac{\pi}{2})``?")
              ```

              Ile metrów to $100$ centymetrów?


              ```{julia}
              #| echo: false
              a = 1
              numericq(a, units="metr/y/ów", hint="Jest to 1 metr")
              ```

              Ile wynosi $\sqrt{2}$?


              ```{julia}
              #| echo: false
              a = sqrt(2)
              Δ = 1e-2
              numericq(a, Δ, hint="Podaj 3 cyfry")
              ```

              Która z odpowiedzi to "jeden"?


              ```{julia}
              #| echo: false
              choices = ("``1``", "``2``", "``3``")
              answer = 1
              radioq(choices, answer, hint="Wybierz odpowiedź pasującą do pytania", keep_order=true)
              ```

              ```{julia}
              #| echo: false
              choices = ["beta", raw"``\beta``", "`beta`"]
              answer = 2
              radioq(choices, answer; label="Która z odpowiedzi to litera?", hint="Która z odpowiedzi przedstawia grecką literę?")
              ```

              Pytanie z dopasowaniem


              ```{julia}
              #| echo: false
              questions = ("Wybierz Volvo", "Wybierz Mercedesa", "Wybierz Audi")
              choices = ("XC90", "A4", "GLE 350", "X1") # may be more than questions
              answer = (1,3,2) # indices of correct
              matchq(questions, choices, answer)
              ```

              Button choice


              ```{julia}
              #| echo: false
              choices = ["beta", raw"``\beta``", "`beta`"]
              answer = 2
              buttonq(choices, answer; label="Wybierz literę", hint="Która z odpowiedzi przedstawia grecką literę?")
              ```

              Hotspot

              ```{julia}
              #| hold: true
              #| echo: false
              using Plots
              p1 = plot(x -> x^2, axis=nothing, legend=false)
              p2 = plot(x -> x^3, axis=nothing, legend=false)
              p3 = plot(x -> -x^2, axis=nothing, legend=false)
              p4 = plot(x -> -x^3, axis=nothing, legend=false)
              l = @layout [a b; c d]
              p = plot(p1, p2, p3, p4, layout=l)
              imgfile = tempname() * ".png"
              savefig(p, imgfile)
              hotspotq(imgfile, (0,1/2), (0, 1/2), label="Który wykres przedstawia ``f(x) = -x^4``?")
              ```

              yesnoq

              ```{julia}
              #| echo: false
              yesnoq("tak"; label="Dobrze się bawisz?", hint="Nie jest przecież tak źle", explanation="Chcemy byś się dobrze bawił/a")
              ```

              booleanq

              ```{julia}
              #| echo: false
              booleanq(true; label="Dobrze się bawisz?", hint="Nie jest przecież tak źle", explanation="Chcemy byś się dobrze bawił/a")
              ```

              multiq

              ```{julia}
              #| echo: false
              choices = ["cytryna", "pomidor", "banan"]
              answers = [1,3]
              multiq(choices, answers; label="Żółte owoce to...?", hint="Nie ten czerwony!")
              ```

              multibuttonq

              ```{julia}
              #| echo: false
              choices = ["cytryna", "pomidor", "banan"]
              answers = [1,3]
              multibuttonq(choices, answers; label="Żółte owoce to...?", hint="Nie ten czerwony!")
              ```

              fillblankq

              ```{julia}
              #| echo: false
              question = "The quick brown fox jumped over the ____ dog"
              fillblankq(question, r"lazy")
              ```

              ```{julia}
              #| echo: false
              fillblankq(question, ("lazy", "brown", "sleeping"), 1)
              ```

              ```{julia}
              #| echo: false
              fillblankq("____ ``+ 2  = 4``", 2)
              ```

              scorecard

              ```{julia}
              #| echo: false
              scorecard()
              ```

              ${}$
        - name: Render Quarto Project
          run: |
            quarto render

        - name: Setup Pages
          uses: actions/configure-pages@v3
        - name: Upload artifact
          uses: actions/upload-pages-artifact@v1
          with:
            path: './_site'
        - name: Deploy to GitHub Pages
          id: deployment
          uses: actions/deploy-pages@v1
